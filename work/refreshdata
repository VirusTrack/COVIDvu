#!/bin/bash

# See: https://github.com/pr3d4t0r/COVIDvu/blob/master/LICENSE 
# vim: set fileencoding=utf-8:

# crontab compliant :)


CONFIG_rclone="rclone.conf"
COVID_19_DIR="COVID-19"
JSON_DATA_BUNDLE="COVID19-cases.tar.gz"
REFRESHDATA_CONFIG="./refreshdata.config"
SITE_BUCKET="virustrack.live"
SITE_DATA_DIR="site-data"
TMP_OUTPUT="/tmp/refreshdata.log"
UPDATE_NOTICE_FILE="last-update.txt"
UPDATE_NOTICE="$SITE_DATA_DIR/$UPDATE_NOTICE_FILE"
UPDATE_ERROR="$SITE_DATA_DIR/ERROR.txt"


# *** functions ***

function die {
    echo "[Error $2] - $1" | tee "$UPDATE_ERROR"
    exit "$2"
} # die


function assertSiteDataExists {
    if [[ ! -d "$SITE_DATA_DIR" ]]
    then
        echo "creating $SITE_DATA_DIR"
        mkdir -p "$SITE_DATA_DIR" || die "failed to create $SITE_DATA_DIR" 3
    fi
} # assertSiteDataExists


function resetErrorNotification {
    [[ -e "$UPDATE_ERROR" ]] && rm -f "$UPDATE_ERROR"
} # resetErrorNotification


function assertCOVID19DirExists {
    [[ -d "./COVID-19" ]] || die "" 1 # nothing to do; silent fail
} # assertCOVID19DirExists


function assertCloudFrontConfig {
    [[ -n "$AWS_ACCESS_KEY_ID" ]] || die "AWS_ACCESS_KEY_ID is not set" 4
    [[ -n "$AWS_SECRET_ACCESS_KEY_ID" ]] || die "AWS_SECRET_ACCESS_KEY_ID is not set" 5
    [[ -n "$VIRUSTRACK_CLOUDFRONT_ID" ]] || die "VIRUSTRACK_CLOUDFRONT_ID not defined" 7
    [[ -n $(which aws) ]] || die "aws command not installed - run apt-get install awscli" 6
} # assertCloudFrontConfig


function assert_rcloneConfig {
    [[ -e "$CONFIG_rclone" ]] || die "rclone config not found" 2
} # assert_rcloneConfig


function resetSiteData {
    # Weird S3 bug that makes rclone "hang" forever if the 
    # files are already there and haven't finished propagating.
    echo "resetting $SITE_DATA_DIR"
    rm -f "$SITE_DATA_DIR"/*
    rclone -q --config="$CONFIG_rclone" --exclude-from=exclude.rclone sync "$SITE_DATA_DIR" "virustrack-website:$SITE_BUCKET/$SITE_DATA_DIR"
} # resetSiteData


function updateCOVID19DataSources {
    echo "refreshing COVID-19 JS CSSE dataset" | tee "$TMP_OUTPUT"

    pushd "$COVID_19_DIR" >> "$TMP_OUTPUT"
    git checkout master >> "$TMP_OUTPUT" 2> /dev/null
    git fetch >> "$TMP_OUTPUT"
    git pull >> "$TMP_OUTPUT"
    popd >> "$TMP_OUTPUT"

    cat "$TMP_OUTPUT" | tee -a "$UPDATE_NOTICE"
    rm -f "$TMP_OUTPUT"

    timeStamp=$(date +"%Y-%m-%d %H:%M:%S")
    printf "\nCompleted on %s\n" "$timeStamp" >> "$UPDATE_NOTICE"
} # updateCOVID19DataSources


function generateVirusUpdateJSONFiles {
    echo "generating virus update JSON files"
    ./vujson

    pushd "$SITE_DATA_DIR" > /dev/null
    tar czf "$JSON_DATA_BUNDLE" *.json
    popd > /dev/null
} # generateVirusUpdateJSONFiles


function deployVirusUpdateJSON {
    echo "cloning $SITE_DATA_DIR to the virustrack.live website"
    rclone -q --config="$CONFIG_rclone" --exclude-from=exclude.rclone sync "$SITE_DATA_DIR" "virustrack-website:$SITE_BUCKET/$SITE_DATA_DIR" || die "rclone site-data to S3 failed" 9

    # TODO: Figure out why this doesn't work well
    # echo "invalidating CloudFront cache"
    # aws cloudfront create-invalidation --distribution-id "$VIRUSTRACK_CLOUDFRONT_ID" --paths '/site-data/*' || die "CloudFront invalidation failed" 8
} # deployVirusUpdateJSON


function patchCSSEData {
    python -m covidvu.vudpatch confirmed deaths recovered
} # patchCSSEData


# *** main ***

assertSiteDataExists
resetErrorNotification
assertCOVID19DirExists
resetSiteData
updateCOVID19DataSources

case "$1" in
    "publish")
        [[ -e "$REFRESHDATA_CONFIG" ]] && source "$REFRESHDATA_CONFIG"
        assertCloudFrontConfig
        assert_rcloneConfig
        generateVirusUpdateJSONFiles
        ./pyavka
        patchCSSEData
        deployVirusUpdateJSON
        ;;
esac

