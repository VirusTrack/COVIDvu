#!/bin/bash

# See: https://github.com/pr3d4t0r/COVIDvu/blob/master/LICENSE 
# vim: set fileencoding=utf-8:

# crontab compliant :)


REFRESHDATA_CONFIG="./refreshdata.config"
[[ -e "$REFRESHDATA_CONFIG" ]] && source "$REFRESHDATA_CONFIG"

source ./pyrunner


# +++ constants +++

CONFIG_rclone="rclone.conf"
COVID_19_DIR="COVID-19"
HTML_FILE_NAME="$SITE_DATA_DIR/table-%02d.html"
JSON_DATA_BUNDLE="COVID19-cases.tar.gz"
PYAVKA_USER_AGENT="Mozilla/5.0 (Macintosh; Intel Mac OS X 10.14; rv:74.0) Gecko/20100101 Firefox/74.0"
RAW_DATA_FILE="$SITE_DATA_DIR/raw-source.html"
RAW_DATA_SOURCE="https://docs.google.com/spreadsheets/d/e/2PACX-1vR30F8lYP3jG7YOq8es0PBpJIE5yvRVZffOyaqC0GgMBN6yt0Q-NI8pxS7hd1F9dYXnowSC6zpZmW9D/pubhtml?gid=0&amp;single=false&amp;widget=true&amp;headers=true"
TMP_OUTPUT="/tmp/refreshdata.log"
UPDATE_ERROR="$SITE_DATA_DIR/ERROR.txt"
# -- order is imortant:
UPDATE_NOTICE_FILE="last-update.txt"
UPDATE_NOTICE="$SITE_DATA_DIR/$UPDATE_NOTICE_FILE"


# *** functions ***

function die {
    echo "[Error $2] - $1" | tee "$UPDATE_ERROR"
    exit "$2"
} # die


function assertSiteDataExists {
    echo "assert $SITE_DATA_DIR directory exists"
    if [[ ! -d "$SITE_DATA_DIR" ]]
    then
        echo "creating $SITE_DATA_DIR"
        mkdir -p "$SITE_DATA_DIR" || die "failed to create $SITE_DATA_DIR" 3
    fi
} # assertSiteDataExists


function resetErrorNotification {
    echo "reset error notification file"
    [[ -e "$UPDATE_ERROR" ]] && rm -f "$UPDATE_ERROR"
} # resetErrorNotification


function assertCOVID19DirExists {
    echo "assert $COVID_19_DIR directory exists"
    [[ -d "./COVID-19" ]] || die "" 1 # nothing to do; silent fail
} # assertCOVID19DirExists


function assertCloudFrontConfig {
    [[ -n "$AWS_ACCESS_KEY_ID" ]] || die "AWS_ACCESS_KEY_ID is not set" 4
    [[ -n "$AWS_SECRET_ACCESS_KEY" ]] || die "AWS_SECRET_ACCESS_KEY is not set" 5
    [[ -n "$VIRUSTRACK_CLOUDFRONT_ID" ]] || die "VIRUSTRACK_CLOUDFRONT_ID not defined" 7
    [[ -n $(which aws) ]] || die "aws command not installed - run apt-get install awscli" 6
} # assertCloudFrontConfig


function assert_rcloneConfig {
    [[ -e "$CONFIG_rclone" ]] || die "rclone config not found" 2
} # assert_rcloneConfig


function assertHospitalBedsJSONFiles {
    [[ -n "$HOSPITAL_BEDS_US_FILE" ]] || die "HOSPITAL_BEDS_US_FILE not defined" 12
    [[ -e "$HOSPITAL_BEDS_US_FILE" ]] || die "HOSPITAL_BEDS_US_FILE $HOSPITAL_BEDS_US_FILE does not exist" 13
} # assertHospitalBedsJSONFiles


function assertCountiesUSJSONFiles {
    [[ -n "$COUNTY_CASES_US_FILE" ]] || die "COUNTY_CASES_US_FILE not defined" 14
    [[ -e "$COUNTY_CASES_US_FILE" ]] || die "COUNTY_CASES_US_FILE $COUNTY_CASES_US_FILE does not exist" 15
} # assertCountiesUSJSONFiles


function resetSiteData {
    echo "resetting $SITE_DATA_DIR"
    rm -f "$SITE_DATA_DIR"/*
} # resetSiteData


function nukeDeploymentSite {
    resetSiteData
    echo "nuking $SITE_DATA_DIR"
    rclone -q --config="$CONFIG_rclone" --exclude-from=exclude.rclone sync --update "$SITE_DATA_DIR" "virustrack-website:$STAGE_BUCKET/$SITE_DATA_DIR"
    rclone -q --config="$CONFIG_rclone" --exclude-from=exclude.rclone sync --update "$SITE_DATA_DIR" "virustrack-website:$SITE_BUCKET/$SITE_DATA_DIR"
} # nukeDeploymentSite


function updateCOVID19DataSources {
    echo "refreshing COVID-19 JS CSSE dataset from GitHub" | tee "$TMP_OUTPUT"

    pushd "$COVID_19_DIR" >> "$TMP_OUTPUT"
    git checkout master >> "$TMP_OUTPUT" 2> /dev/null
    git fetch >> "$TMP_OUTPUT"
    git pull >> "$TMP_OUTPUT"
    popd >> "$TMP_OUTPUT"

    cat "$TMP_OUTPUT" | tee -a "$UPDATE_NOTICE"
    rm -f "$TMP_OUTPUT"

    timeStamp=$(TZ=":Etc/UTC" date +"%Y-%m-%dT%H:%M:%SZ")
    printf "\nCompleted on %s\n" "$timeStamp" >> "$UPDATE_NOTICE"
} # updateCOVID19DataSources


function generateVirusUpdateJSONFiles {
    echo "vujson - generating virus update JSON files"

    env | awk '/VIRT/' | sort
    python3 -m covidvu.pipeline.vujson confirmed deaths recovered
    ls -Alrt "$SITE_DATA_DIR"
} # generateVirusUpdateJSONFiles


function generateHospitalBedsJSONFiles {
    local hospitalBedsTargetFile="$SITE_DATA_DIR/hospital-beds-count-US.json"

    printf "fetching current US hospital beds count\n  "
    cp -vf "$HOSPITAL_BEDS_US_FILE" "$hospitalBedsTargetFile"
} # generateHospitalBedsJSONFiles


function generateCountiesUSJSONFile {
    local countiesUSTargetFile="$SITE_DATA_DIR/counties-US-all.json"

    printf "fetching current US counties report\n  "
    cp -vf "$COUNTY_CASES_US_FILE" "$countiesUSTargetFile"
} # generateCountiesUSJSONFile


function fetchBNODataSource {
    echo "-----"
    curl -A "$PYAVKA_USER_AGENT" -vi -o "$RAW_DATA_FILE" --connect-timeout 20 "$RAW_DATA_SOURCE" | 
    [[ "$?" == 0 ]] || exit 99

    cat "$RAW_DATA_FILE" | awk '/<table/ { gsub("<table", "\n<table"); gsub("/table>", "/table>\n"); print; }' | \
    awk -v "H=$HTML_FILE_NAME" '/<table/ { o = sprintf(H, n++); print > o; close(o); }'

    echo "+++++"
} # fetchBNODataSource


function patchJSONFiles {
    local subCommand="$1"
    # TODO: Document the command line arguments in the README.md page:
    #
    #       ./refreshdata publish patch
    #
    #       ./refreshdata noop patch
    #
    #       ./refreshdata
    if [[ "patch" = "$subCommand" ]]
    then
        now=$(date)
        echo "pyavka - grabbing the spreadsheet"
        fetchBNODataSource
        python3 -m covidvu.pipeline.pyavka
        ls -Alrt "$SITE_DATA_DIR"/*html

        echo "vudpatch - patching stale JH CSSE data with latest, calculated updates"
        python -m covidvu.pipeline.vudpatch confirmed deaths recovered
        ls -Alrt "$SITE_DATA_DIR"/*json
    fi
} # patchJSONFiles


function packJSONFiles {
    echo "jsonpack - combine individual JSON files into a single blob"
    python3 -m covidvu.pipeline.jsonpack
    ls -Alrt "$SITE_DATA_DIR"/*json
} # packJSONFiles


function generateRegionsJSONBundle {
    echo "vuregions - generate continental region summaries"
    env | awk '/VIRT/' | sort
    python3 -m covidvu.pipeline.vuregions
    ls -Alrt "$SITE_DATA_DIR"
} # generateRegionsJSONBundle


function invalidateCloudFrontCache {
    aws cloudfront create-invalidation --distribution-id "$VIRUSTRACK_CLOUDFRONT_ID" --paths "/*"
} # invalidateCloudFrontCache


function deployVirusUpdateJSON {
    [[ -n "$1" ]] || die "deployment failed; target bucket not specified" 10

    local targetBucket="$1"

    echo "cloning $SITE_DATA_DIR to the $targetBucket website"
    rclone -q --config="$CONFIG_rclone" --exclude-from=exclude.rclone sync --update "$SITE_DATA_DIR" "virustrack-website:$targetBucket/$SITE_DATA_DIR" || die "rclone site-data to S3 failed" 9

    invalidateCloudFrontCache
} # deployVirusUpdateJSON


# *** main ***

echo "*** COVIDvu - website refresh tool ***"

assertSiteDataExists
resetErrorNotification
resetSiteData "$1"
assertCOVID19DirExists
updateCOVID19DataSources
generateVirusUpdateJSONFiles
generateHospitalBedsJSONFiles
generateCountiesUSJSONFile
patchJSONFiles "$2"
packJSONFiles
generateRegionsJSONBundle
assertCloudFrontConfig
assert_rcloneConfig

[[ "$#" < 1 ]] && exit 0 

case "$1" in
    "local")
        ;&
    "noop")
        ;;
    "nuke")
        nukeDeploymentSite
        ;;
    "publish")
        deployVirusUpdateJSON "$SITE_BUCKET"
        ;;
    "staging")
        ;&
    "stage")
        deployVirusUpdateJSON "$STAGE_BUCKET"
        ;;
    *)
        die "invalid command - use stage|publish|nuke|noop" 11
        ;;
esac

