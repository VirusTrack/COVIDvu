#!/bin/bash

# See: https://github.com/VirusTrack/COVIDvu/blob/master/LICENSE 
# vim: set fileencoding=utf-8:
# Version 2.0

# crontab compliant :)


REFRESHDATA_CONFIG="./refreshdata.config"
[[ -e "$REFRESHDATA_CONFIG" ]] && source "$REFRESHDATA_CONFIG"
[[ -e "$REFRESHDATA_CONFIG" ]] || exit 250

source ./pyrunner


# +++ constants +++

CONFIG_rclone="rclone.conf"
COVID_19_DIR="COVID-19"
HTML_FILE_NAME="$SITE_DATA_DIR/table-%02d.html"
JSON_DATA_BUNDLE="COVID19-cases.tar.gz"
MINUTES_CURRENT=$(awk 'BEGIN { "date +\"%s\"" | getline time; print(int((time%3600)/60)); }')
RAW_DATA_FILE="$SITE_DATA_DIR/raw-source.html"
RAW_DATA_SOURCE="https://docs.google.com/spreadsheets/d/e/2PACX-1vR30F8lYP3jG7YOq8es0PBpJIE5yvRVZffOyaqC0GgMBN6yt0Q-NI8pxS7hd1F9dYXnowSC6zpZmW9D/pubhtml?gid=0&amp;single=false&amp;widget=true&amp;headers=true"
RESOURCES_DIR="./resources"
SNAPSHOTS_DIR="./database"
TMP_OUTPUT="/tmp/refreshdata.log"
UPDATE_ERROR="$SITE_DATA_DIR/ERROR.txt"
# -- order is imortant:
UPDATE_NOTICE_FILE="last-update.txt"
UPDATE_NOTICE="$SITE_DATA_DIR/$UPDATE_NOTICE_FILE"


# *** functions ***

function die {
    echo "[Error $2] - $1" | tee "$UPDATE_ERROR"
    exit "$2"
} # die


function assertSiteDataExists {
    echo "assert $SITE_DATA_DIR directory exists"
    if [[ ! -d "$SITE_DATA_DIR" ]]
    then
        echo "creating $SITE_DATA_DIR"
        mkdir -p "$SITE_DATA_DIR" || die "failed to create $SITE_DATA_DIR" 3
    fi
} # assertSiteDataExists


function resetErrorNotification {
    echo "reset error notification file"
    [[ -e "$UPDATE_ERROR" ]] && rm -f "$UPDATE_ERROR"
} # resetErrorNotification


function assertCloudFrontConfig {
    [[ -n "$AWS_ACCESS_KEY_ID" ]] || die "AWS_ACCESS_KEY_ID is not set" 4
    [[ -n "$AWS_SECRET_ACCESS_KEY" ]] || die "AWS_SECRET_ACCESS_KEY is not set" 5
    [[ -n "$VIRUSTRACK_CLOUDFRONT_ID" ]] || die "VIRUSTRACK_CLOUDFRONT_ID not defined" 7
    [[ -n $(which aws) ]] || die "aws command not installed - run apt-get install awscli" 6
} # assertCloudFrontConfig


function assert_rcloneConfig {
    [[ -e "$CONFIG_rclone" ]] || die "rclone config not found" 2
} # assert_rcloneConfig


function resetSiteData {
    echo "resetting $SITE_DATA_DIR"
    for fileNamePrefix in bundle confirmed counties deaths hospital last raw scraped table
    do
        rm -f "$SITE_DATA_DIR/$fileNamePrefix"*
    done
} # resetSiteData


function nukeDeploymentSite {
    resetSiteData
    echo "nuking $SITE_DATA_DIR"
    rclone -q --config="$CONFIG_rclone" --exclude-from=exclude.rclone sync --update "$SITE_DATA_DIR" "virustrack-website:$STAGE_BUCKET/$SITE_DATA_DIR"
    rclone -q --config="$CONFIG_rclone" --exclude-from=exclude.rclone sync --update "$SITE_DATA_DIR" "virustrack-website:$SITE_BUCKET/$SITE_DATA_DIR"
} # nukeDeploymentSite


function generateHospitalBedsData {
    local hospitalBedsTargetFile="$SITE_DATA_DIR/hospital-beds-count-US.json"

    printf "fetching current US hospital beds count\n  "
    cp -vf "$HOSPITAL_BEDS_US_FILE" "$hospitalBedsTargetFile"
    [[ "0" != "$?" ]] && die "generateHospitalBedsData - failed" 18
} # generateHospitalBedsData


function generateUSCountiesData {
    local countiesUSTargetFile="$SITE_DATA_DIR/counties-US-all.json"

    printf "fetching current US counties report\n  "
    cp -vf "$COUNTY_CASES_US_FILE" "$countiesUSTargetFile"
    [[ "0" != "$?" ]] && die "generateUSCountiesData - failed" 19
} # generateUSCountiesData


function fetchJITDataSource {
    echo "+++++"
    curl -A "$PYAVKA_USER_AGENT" -vi -o "$RAW_DATA_FILE" --connect-timeout 20 "$RAW_DATA_SOURCE" | 
    [[ "0" != "$?" ]] && die "fetchJITDataSource unable to fetch $RAW_DATA_SOURCE" 20

    cat "$RAW_DATA_FILE" | awk '/<table/ { gsub("<table", "\n<table"); gsub("/table>", "/table>\n"); print; }' | \
    awk -v "H=$HTML_FILE_NAME" '/<table/ { o = sprintf(H, n++); print > o; close(o); }'
    [[ "0" != "$?" ]] && die "fetchJITDataSource invalid $RAW_DATA_FILE HTML scraping issue" 21
    echo "+++++"
} # fetchJITDataSource


function generateJITData {
    # TODO: Document the command line arguments in the README.md page:
    #
    #       ./refreshdata publish
    #
    #       ./refreshdata noop
    #
    #       ./refreshdata
    echo "pyavka - grabbing the spreadsheet"
    fetchJITDataSource
    python3 -m covidvu.pipeline.pyavka
    ls -Alrt "$SITE_DATA_DIR"/*html

    echo "vuupdate - updating system with latest calculated updates"
    python -m covidvu.pipeline.vuupdate confirmed deaths
    ls -Alrt "$SITE_DATA_DIR"/*json  | awk '!/conf-int/ && !/mean-/'
} # generateJITData


function packDataFiles {
    echo "jsonpack - combine individual JSON files into a single blob"
    python3 -m covidvu.pipeline.jsonpack
    [[ "0" != "$?" ]] && die "jsonpack failed" 22
    ls -Alrt "$SITE_DATA_DIR"/*json | awk '!/conf-int/ && !/mean-/'
} # packDataFiles


function generateContinentalRegionsData {
    echo "vuregions - generate continental region summaries"
    env | awk '/VIRT/' | sort
    python3 -m covidvu.pipeline.vuregions
    [[ "0" != "$?" ]] && die "vuregions failed" 23
    ls -Alrt "$SITE_DATA_DIR"/bundle*json
} # generateContinentalRegionsData


function setLatestUpdateNotice {
    timeStamp=$(TZ=":Etc/UTC" date +"%Y-%m-%dT%H:%M:%SZ")
    printf "\nCompleted on %s\n" "$timeStamp" | tee "$UPDATE_NOTICE"
} # setLatestUpdateNotice


function deployVirusDataUpdate {
    [[ -n "$1" ]] || die "deployment failed; target bucket not specified" 10

    local targetBucket="$1"
    local targetEnvironment="$2"

    echo "cloning $SITE_DATA_DIR to the $targetBucket website"
    rclone -q --config="$CONFIG_rclone" --exclude-from=exclude.rclone sync --update "$SITE_DATA_DIR" "virustrack-website:$targetBucket/$SITE_DATA_DIR" || die "rclone site-data to S3 failed" 9
    [[ "0" != "$?" ]] && die "rclone failed" 25

    ./flushcf "$targetEnvironment"
} # deployVirusDataUpdate


function makeDataSnapshot {
    local minutes="$MINUTES_CURRENT"

    echo "database snapshot time check - current minutes offset = $minutes"

    if [[ "0" == "$minutes" ]]
    then
        mkdir -p "$SNAPSHOTS_DIR"
        local now=$(date +"%Y%m%d-%H%M")
        local fileName="$SNAPSHOTS_DIR/virustrack_db-snapshot-$now.tar.bz2"

        echo "  creating snapshot at $fileName"

        tar cvjf "$fileName" "$MASTER_DATABASE_DIR"/* 
        [[ "0" != "$?" ]] && die "makeDataSnapshot failed - tar/bzip2 issue"  26
        rclone -q --config="$CONFIG_rclone" SYNC --UPDATE "$MASTER_DATABASE_DIR" "virustrack-website:$TEST_BUCET/$MASTER_DATABASE_DIR" || die "rclone $MASTER_DATABASE_DIR to S3 failed" 27
        rclone -q --config="$CONFIG_rclone" SYNC --UPDATE "$SNAPSHOTS_DIR" "virustrack-website:$TEST_BUCET/$SNAPSHOTS_DIR" || die "rclone $SNAPSHOTS_DIR to S3 failed" 27
    fi
} # makeDataSnapshot


# *** main ***

echo "*** COVIDvu - website refresh tool ***"

assertSiteDataExists
resetErrorNotification
resetSiteData "$1"
generateHospitalBedsData
generateUSCountiesData
generateJITData
packDataFiles
generateContinentalRegionsData
setLatestUpdateNotice
assertCloudFrontConfig
assert_rcloneConfig

[[ "$#" < 1 ]] && exit 0 
environment="$1"

case "$environment" in
    "local")
        ;&
    "noop")
        ;;
    "nuke")
        nukeDeploymentSite
        ;;
    "production")
        ;&
    "publish")
        deployVirusDataUpdate "$SITE_BUCKET" "$environment"
        ;;
    "staging")
        ;&
    "stage")
        deployVirusDataUpdate "$STAGE_BUCKET" "$environment"
        ;;
    "testing")
        ;&
    "test")
        deployVirusDataUpdate "$TEST_BUCKET" "$environment"
        ;;
    *)
        die "invalid command - use stage|publish|nuke|noop" 11
        ;;
esac

makeDataSnapshot

